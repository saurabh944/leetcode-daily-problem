Minimum Number of Refueling Stops
A car travels from a starting position to a destination which is target miles east of the starting position.

Along the way, there are gas stations.  Each station[i] represents a gas station that is station[i][0] miles east of the starting position, 
and has station[i][1] liters of gas.

The car starts with an infinite tank of gas, which initially has startFuel liters of fuel in it.  It uses 1 liter of gas per 1 mile that it drives.

When the car reaches a gas station, it may stop and refuel, transferring all the gas from the station into the car.

What is the least number of refueling stops the car must make in order to reach its destination?  If it cannot reach the destination, return -1.

Note that if the car reaches a gas station with 0 fuel left, the car can still refuel there.  If the car reaches the destination with 0 fuel left, 
it is still considered to have arrived.

//Code
class Solution {
public:
    int minRefuelStops(int target, int startFuel, vector<vector<int>>& stations) {
        int stationid=0;int range=startFuel;int res=0;
        priority_queue<int>pq;
        while(range<target){
            while(stationid<stations.size() && range>=stations[stationid][0]){
                pq.push(stations[stationid][1]);++stationid;
            }
            if(pq.empty())return -1;
            auto v=pq.top();pq.pop();
            range+=v;
            res++;
        }
        return res;
    }
};

Explanation:
Initially you have a range(startFuel), before you run out of fuel, you can stop by any station within your range.
The greedy idea is to put all the stations within your range into a candidate list (pq), then you always pick the station with the most fuel supply one at a time to
extend your range until your range reaches the target.
Once your range is extended, you can add more stations to your candidate list.
If you have exhausted the stations in your list(pq) and still can't reach the target, return -1.
